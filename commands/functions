escape_html() {
    sed -e 's/&/\&amp;/g' \
        -e 's/</\&lt;/g'  \
        -e 's/>/\&gt;/g'
}

escape_markdown_v2() {
    sed -e 's/\\/\\\\/g' \
        -e 's/-/\\-/g' \
        -e 's/_/\\_/g' \
        -e 's/*/\\*/g' \
        -e 's/\[/\\[/g' \
        -e 's/]/\\]/g' \
        -e 's/(/\\(/g' \
        -e 's/)/\\)/g' \
        -e 's/~/\\~/g' \
        -e 's/`/\\`/g' \
        -e 's/>/\\>/g' \
        -e 's/#/\\#/g' \
        -e 's/+/\\+/g' \
        -e 's/=/\\=/g' \
        -e 's/|/\\|/g' \
        -e 's/{/\\{/g' \
        -e 's/}/\\}/g' \
        -e 's/\./\\./g' \
        -e 's/!/\\!/g'
}

escape_special() {
    sed -e 's/\//\\\//g'
}

escape_str() {
    case "$cmd_parse_mode" in
        Markdown*) escape_markdown_v2 ;;
        HTML) escape_html ;;
        *) cat ;;
    esac
}

urlencode() {
    local _c
    while IFS= read -r -n1 _c; do
        [ -z "$_c" ] && break
        case "$_c" in
            [a-zA-Z0-9.~_-]) printf '%s' "$_c" ;;
            *) printf '%%%02X' "'$_c" ;;
        esac
    done
}

urldecode() {
    printf '%b' "$(cat | tr '+' ' ' | sed 's/%/\\x/g')"
}

block_code() {
    local _lang="$1"
    case "$cmd_parse_mode" in
        Markdown*)
            echo -n '```'
            echo "${_lang}"
            cat
            echo '```'
            ;;
        HTML)
            echo -n '<pre>'
            [ -n "$_lang" ] && echo -n "<code class="language-${_lang}">"
            cat
            [ -n "$_lang" ] && echo -n "</code>"
            echo -n '</pre>'
            ;;
        *)
            cat
            ;;
    esac
}

block_code_inline() {
    case "$cmd_parse_mode" in
        Markdown*) echo -n '`'; cat; echo -n '`' ;;
        HTML) echo -n '<code>'; cat; echo -n '</code>' ;;
        *) cat ;;
    esac
}

log() {
    local _log_file="$1"
    local _msg="$2"
    echo -e "$(date +"%Y-%m-%d %T") - ${_msg}" >> "$_log_file"
}

restart_xkeen() {
    local _msg_pre="$1"
    local _msg_err="$2"
    local _msg_ok="$3"
    [ -z "$_msg_pre" ] && _msg_pre="Перезапуск прокси..."
    [ -z "$_msg_err" ] && _msg_err="❌ Ошибка перезапуска"
    [ -z "$_msg_ok" ] && _msg_ok="✅ Прокси перезапущен"
    local _start_time=$(date +%s)
    local _end_time

    echo "$_msg_pre" | escape_str | send_message
    xkeen -restart &>/dev/null
    if xkeen -status | grep "не запущен" &>/dev/null; then
        echo "$_msg_err" | escape_str | send_message
    else
        local _end_time=$(date +%s)
        echo "$_msg_ok (за $(( $_end_time - $_start_time )) сек)" | escape_str | send_message
    fi
}

send_message_tg() {
    local _msg="$1"
    local _user_id="$2"
    [ -z "$_user_id" ] && _user_id="$_chat_id"
    case "$cmd_parse_mode" in
        HTML | Markdown*)
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
                 -d "parse_mode=${cmd_parse_mode}" \
                 -d "chat_id=${_user_id}" \
                 --data-urlencode "text=${_msg}"
            ;;
        *)
            curl -s "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
                 -d "chat_id=${_user_id}" \
                 --data-urlencode "text=$_msg"
            ;;
    esac
}
