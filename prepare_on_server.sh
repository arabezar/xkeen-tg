#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–ø–∫—É —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_PATH=$(cd `dirname $0` && pwd)

# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫—Ä–∏–ø—Ç–∞
. ${SCRIPT_PATH}/.env

# —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–ø—Ä–æ—Å—ã
is_production() { [ "${PROD_MODE}" = "true" ]; }
is_synology() { uname -a | grep "synology" &>/dev/null; }
user_get_info() { user_info=`grep -E "^${SSH_USER}" /etc/passwd`
                  user_dir=`echo "${user_info}" | cut -d ':' -f 6`
                  user_shell=`echo "${user_info}" | cut -d ':' -f 7`; }
user_not_exists() { user_get_info; [ -z "${user_info}" ]; }
user_inactive() { echo "${user_shell}" | grep -E "/nologin|/false" &>/dev/null; }
user_limited() { echo "${user_shell}" | grep "/rbash" &>/dev/null; }
replace_slash() { echo "$1" | sed 's/\//\\\//g'; }
ask_user() { read -p "$1 : " -n 1 -r && echo; [[ $REPLY =~ $2 ]]; }

# —Ñ—É–Ω–∫—Ü–∏–∏, –∏–∑–º–µ–Ω—è—é—â–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ
user_create_syno() { is_production && synouser --add "$SSH_USER" "$SSH_PASS" "User wants Let's Encrypt certificate" 0 "" 0 &>/dev/null; }
user_create_linux() { is_production && useradd -m -p "$SSH_PASS" -c "User wants Let's Encrypt certificate" "$SSH_USER" &>/dev/null; }
user_create() { if is_synology; then user_create_syno; else user_create_linux; fi; }
replace_shell() { is_production && sed -i "/^${SSH_USER}/s/$(replace_slash ${user_shell})/$(replace_slash $1)/" /etc/passwd &>/dev/null; }
limit_user() { replace_shell $(get_create_rshell) && echo -e "\nPATH=\n" >> ${user_dir}/.bash_profile; }
create_link() { if [[ -L "${user_dir}/$1" ]]; then
                    show_info_cert_link_exists "$2"
                elif  [[ -f "$2" ]]; then
                    if is_production && ln -s "$2" "${user_dir}/$1" &>/dev/null; then
                        chmod o+r "${user_dir}/$1" &>/dev/null
                        show_info_cert_linked "$2"
                    else show_error_cant_create_link "$2"; fi
                else show_error_no_cert "$2"; fi; }
get_create_rshell() { if ! ls -l /bin/rbash &>/dev/null; then
                        is_production && ln -s /bin/bash /bin/rbash &>/dev/null; fi
                      echo /bin/rbash; }

# —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ —Å –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
show_error() { echo "‚ùå $1" >&2; exit $2; }
show_error_nouser() { show_error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${SSH_USER} –Ω–µ –Ω–∞–π–¥–µ–Ω" 1; }
show_error_user_created() { show_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}" 2; }
show_error_inactive() { show_error "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${SSH_USER} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" 3; }
show_error_cannot_activate() { show_error "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}" 4; }
show_error_cannot_limit() { show_error "–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}" 5; }
show_error_no_cert_dir() { show_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ '${CERT_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" 6; }
show_error_no_cert() { show_error "–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω" 7; }
show_error_cant_create_link() { show_error "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '$1' –Ω–µ —Å–æ–∑–¥–∞–Ω–∞" 8; }

# —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_info_user_checking() { echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}..."; }
show_info_user_exists() { echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${SSH_USER} –Ω–∞–π–¥–µ–Ω"; }
show_info_user_deactivated() { echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${SSH_USER} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"; }
show_info_user_activated() { echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${SSH_USER} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"; }
show_info_user_limited() { echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${SSH_USER} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –ø—Ä–∞–≤–∞—Ö"; }
show_info_user_creating() { echo "üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}..."; }
show_info_user_created() { echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${SSH_USER} —Å–æ–∑–¥–∞–Ω"; }
show_info_cert_linked() { echo "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '$1' —Å–æ–∑–¥–∞–Ω–∞"; }
show_info_cert_link_exists() { echo "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '$1' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; }

# ================================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [[ -z "${SSH_USER}" || -z "${SSH_PASS}" || -z "${DOMAIN}" || -z "${CERT_PATH}" ]]; then
    show_error "–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" 255
fi

# ================================================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
show_info_user_checking
if user_not_exists; then
    if ask_user "‚ùì –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}?" "^[Yy–î–¥]$"; then
        if user_create; then
            show_info_user_created
            user_not_exists # –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else
            show_error_user_created
        fi
    else
        show_error_nouser
    fi
else
    show_info_user_exists
fi

# –í–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
if user_inactive; then
    show_info_user_deactivated
    if ask_user "‚ùì –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}?" "^[Yy–î–¥]+"; then
        if limit_user; then
            show_info_user_activated
        else
            show_error_cannot_activate
        fi
    else
        show_error_inactive
    fi
# –ò –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞
elif ! user_limited && ask_user "‚ùì –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SSH_USER}?" "^[Yy–î–¥]+"; then
    if limit_user; then
        show_info_user_limited
    else
        show_error_cannot_limit
    fi
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ
if [[ -d "${CERT_PATH}" ]]; then
    create_link "cert.cer" "${CERT_PATH}/${DOMAIN}.cer"
    create_link "cert.key" "${CERT_PATH}/${DOMAIN}.key"
    create_link "fullchain.cer" "${CERT_PATH}/fullchain.cer"
else
    show_error_no_cert_dir
fi
