#!/bin/sh

# Определение папки скрипта и зависящих от неё параметров
SCRIPT_PATH=$(cd "$(dirname $0)" && pwd)
XKEENTG_PATH="${SCRIPT_PATH}/.xkeentg"
ENV_FILE="${XKEENTG_PATH}/.env"
TOOLS_FILE="${XKEENTG_PATH}/functions"
DUMMY_FUNCTIONS_FILE="${XKEENTG_PATH}/tg_null_cmd"

# Загрузка параметров
if [ -f "$ENV_FILE" -a -f "$TOOLS_FILE" -a -f "$DUMMY_FUNCTIONS_FILE" ]; then
    . "$ENV_FILE"
    . "$TOOLS_FILE"
else
    echo "Файл конфигурации ${ENV_FILE} и/или вспомогательные функции не найдены, запуск невозможен"
    exit 255
fi

# Логи
LOG_PATH="/opt/var/log/tgbotd"
LOG_FILE_MSG_VALID="${LOG_PATH}/msg.log"
LOG_FILE_MSG_ILLEGAL="${LOG_PATH}/msg_illegal.log"
LOG_FILE_MSG_ERROR="${LOG_PATH}/msg_error.log"
LOG_FILE_MSG_SKIP="${LOG_PATH}/msg_skip.log"
LOG_FILE_POST="${LOG_PATH}/post.log"
LOG_FILE_GET="${LOG_PATH}/get.log"
LOG_FILE_UNKNOWN="${LOG_PATH}/unknown.log"

mkdir -p "$LOG_PATH"
RESPONSE="HTTP/1.1 200 OK\r\nContent-Length: 0\nContent-Type: text/html\n\n"

build_help() {
    local _commands _lf _filepath _filename
    for _filepath in $XKEENTG_PATH/*.tg; do
        . $_filepath
        _filename=${_filepath##*/}
        _commands="${_commands}${_lf}$(cmd_help "/${_filename%.tg}")"
        _lf="\n"
    done
    echo -e "$_commands"
}

send_message() {
    local _msg="$1"
    [ -z "$_msg" ] && _msg=$(cat)
    if [ -n "$_msg" ]; then
        echo -e "\t${_msg//$'\n'/'\n\t'}" >> "$LOG_FILE_MSG_VALID"
        local _answer=$(send_message_tg "$_msg")
        # сообщения для отладки разработчикам плагинов - ошибочные ответы на команды бота
        [[ "$(echo "$_answer" | jq -r '.ok')" != "true" ]] && echo -e "\t\t$_answer" >> "$LOG_FILE_MSG_VALID"
    fi
}

# Бесконечный цикл для обработки входящих сообщений
while true; do
    _request=$(echo -e "$RESPONSE" | nc -l -p $TG_LOCAL_PORT )
    if ! echo "$_request" | head -n1 | grep -qE "^[a-zA-Z]+\s+/${TG_TOKEN}"; then
        # binary file - иногда попадается, следим...
        echo "$request" > "${LOG_PATH}/binary-$(date +"%Y%m%d-%H%M%S").log"
        sleep 2
        continue
    fi

    _ip=$(echo "$_request" | grep -i 'X-Forwarded-For: ' | tr -d '\r')
    _ua=$(echo "$_request" | grep -i 'user-agent: ' | tr -d '\r')
    if echo "$_request" | head -n1 | grep -qiE "^GET\s+"; then
        # get - Телега шлёт только POST
        log "$LOG_FILE_GET" "${_ip//X-Forwarded-For: /} ${_ua//user-agent: /}"
        continue
    fi
    if ! echo "$_request" | head -n1 | grep -qE "^POST\s+"; then
        # not post - Телега шлёт только POST
        log "$LOG_FILE_UNKNOWN" "${_ip//X-Forwarded-For: /} ${_ua//user-agent: /}"
        continue
    fi

    _json=$(echo "$_request" | sed "/{/!d")
    if [ -z "$_json" ]; then
        # post without json - Телега шлёт только json
        log "$LOG_FILE_POST" "${_ip//X-Forwarded-For: /} ${_ua//user-agent: /}"
        continue
    fi

    # разбор json
    _log_msg=$(echo "$_json" | jq -c '.')
    # echo -e "$_request\n\n$_log_msg" > "${LOG_PATH}/test-$(date +"%Y%m%d-%H%M%S").log"
    if [ $? -ne 0 ]; then
        log "$LOG_FILE_MSG_ERROR" "${_ip//X-Forwarded-For: /} - Ошибка парсинга json\n${_request}"
        continue
    fi

    _msg_type=$(echo $_json | jq -r 'to_entries[1].key')
    if [ -z "$_msg_type" ] || [[ "$_msg_type" != "message" ]]; then
        # обрабатываем только обычные сообщения, никаких сервисных, редактирований и т.д.
        log "$LOG_FILE_MSG_SKIP" "${_ip//X-Forwarded-For: /} - Тип сообщения не поддерживается - $_log_msg"
        continue
    fi

    _chat_id=$(echo "$_json" | jq -r ".${_msg_type}.chat.id")
    _text=$(echo "$_json" | jq -r ".${_msg_type}.text")
    if [[ "$_chat_id" == "null" ]]; then
        log "$LOG_FILE_MSG_ERROR" "${_ip//X-Forwarded-For: /} - Пользователь не найден - $_log_msg"
        continue
    fi

    if [[ "$TG_CHAT_IDS" != *"$_chat_id"* ]]; then
        # Проверка нелегалов, не прописанных в конфиге
        log "$LOG_FILE_MSG_ILLEGAL" "${_ip//X-Forwarded-For: /} - $_log_msg"
        # _reply="Вы не зарегистрированы в системе, обратитесь к администратору"
        # send_message "$_reply"
        continue
    else
        log "$LOG_FILE_MSG_VALID" "${_ip//X-Forwarded-For: /} - $_log_msg"
    fi

    # Парсинг текста сообщения - команды
    . $DUMMY_FUNCTIONS_FILE
    _cmd="${_text%% *}"
    if [ -f "${XKEENTG_PATH}${_cmd}.tg" ]; then
        . "${XKEENTG_PATH}${_cmd}.tg"
        cmd_run $_text | send_message
    else
        cmd_parse_mode="MarkdownV2"
        echo -e "Команды:\n$(build_help)" | send_message
    fi
done
